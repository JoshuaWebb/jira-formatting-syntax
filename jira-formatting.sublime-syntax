%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - jira
scope: text.jira

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: escape
    - include: bold
    - include: heading
    - include: monospaced

  escape:
    - match: '\\.'
      scope: constant.character.escape.jira

  heading:
    # TODO: can this be done without the duplication?
    - match: 'h1\.'
      scope: punctuation.definition.heading.jira
      push:
        - meta_scope: markup.heading.jira markup.heading.1.jira
        - match: $\n?
          pop: true
    - match: 'h2\.'
      scope: punctuation.definition.heading.jira
      push:
        - meta_scope: markup.heading.jira markup.heading.2.jira
        - match: $\n?
          pop: true
    - match: 'h3\.'
      scope: punctuation.definition.heading.jira
      push:
        - meta_scope: markup.heading.jira markup.heading.3.jira
        - match: $\n?
          pop: true
    - match: 'h4\.'
      scope: punctuation.definition.heading.jira
      push:
        - meta_scope: markup.heading.jira markup.heading.4.jira
        - match: $\n?
          pop: true
    - match: 'h5\.'
      scope: punctuation.definition.heading.jira
      push:
        - meta_scope: markup.heading.jira markup.heading.5.jira
        - match: $\n?
          pop: true
    - match: 'h6\.'
      scope: punctuation.definition.heading.jira
      push:
        - meta_scope: markup.heading.jira markup.heading.6.jira
        - match: $\n?
          pop: true

  monospaced:
    - match: '{{(\s*)(?=[^\n]+}})'
      captures:
        1: invalid.illegal.whitespace.jira
      scope: punctuation.definition.braces.begin.jira
      push:
        - meta_scope: markup.raw.inline.jira
        # Not really "escaped"... this is literally two braces in the output
        - match: '{{'
        - match: '\\{'
          scope: constant.character.escape.jira
        - match: '{(?!{)'
          scope: invalid.illegal.stray.brace.jira
        - match: '(?<! )}}'
          scope: punctuation.definition.braces.end.jira
          pop: true
        - match: $\n?
          scope: invalid.illegal.unexpected-eol.jira
          pop: true

  bold:
      # This doesn't implement all of the matching rules, it ensures that
      # invalid bold cases don't get pushed into bold mode, because we can't
      # un-mark something as bold if we later discover it doesn't form a pair

      # TODO: There's some ideas in here that might be useful,
      #       it needs to properly embed the concept of "this might
      #       not be the closing asterisk, but it's acceptable provided
      #       that a real closing asterisk is present"
      #
      #       the closing asterisk cannot be preceded by spaces,
      #       but embedded asterisks can, similarly embedded asterisks
      #       can be surrounded by word characters.
    - match: |-
        (?x)
          (?:
            (?<!\w)     # Can't be preceded directly by a word character
            \*          # The opening `*`
            |
            (\{\*\})    # Possibly escaped
          )
          (?![\s\*])  # Can't have a space or a `*` directly after the opening `*`
          (?=         # Look for (but don't consume) a valid closing `*`
            (?:
              [^\*\\]\*     # A single (non-asterisk, non-escape) character then the closing asterisk
              |
              (?:           # Otherwise
                [^\*\\]{2,}          # At least two non-asterisk characters (or non-escape characters)
                |
                [^\\\*]*\\.[^\\\*]*  # Or an escaped character (with optionally some non-asterisks around it)
              )
              (\*)          # An asterisk (this is only the closing asterisk if it isn't followed directly some word characters)

              # Once we've had at least one of the above, then the requirements are relaxed
              # to just one or more non-asterisk characters
              (?:
                (?:
                  [^\*\\]+           # At least one non-asterisk characters (or non-escape characters)
                  |
                  [^\\\*]*\\.        # Or an escaped character (with optionally some non-asterisks around it)
                )
                (\*)                 # Followed by an asterisk (this is only the closing asterisk if it isn't followed directly some word characters)
              )*            # There can be many nested asterisks that aren't the closing asterisk
            )
            (?!\w)    # Can't have a word character directly after the closing `*` (if there is, it isn't a closing asterisk)
          )
      scope: punctuation.definition.bold.jira
      captures:
        1: constant.character.escape.jira
      push: inside_bold

  inside_bold:
    - meta_include_prototype: false
    - meta_scope: markup.bold.jira
    - match: '(?<![\s\*])\{\*\}'
      scope: constant.character.escape.jira punctuation.definition.bold.jira
      pop: true
    - match: '\\.'
      scope: constant.character.escape.jira
    - match: '(?<=\S)\*(?!\w)'
      scope: punctuation.definition.bold.jira
      pop: true

  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: '//'
      scope: punctuation.definition.comment.jira
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.jira
        - match: $\n?
          pop: true
